// Code generated from ApiParser.g4 by ANTLR 4.12.0. DO NOT EDIT.

package api

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type ApiParserLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var apiparserlexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func apiparserlexerLexerInit() {
	staticData := &apiparserlexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "'='", "'('", "')'", "'{'", "'}'", "'*'", "'time.Time'", "'['",
		"']'", "'returns'", "'-'", "'/'", "'/:'", "'@doc'", "'@handler'", "'interface{}'",
		"'@server'",
	}
	staticData.symbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "ATDOC", "ATHANDLER",
		"INTERFACE", "ATSERVER", "WS", "COMMENT", "LINE_COMMENT", "STRING",
		"RAW_STRING", "LINE_VALUE", "ID", "LetterOrDigit",
	}
	staticData.ruleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "ATDOC", "ATHANDLER", "INTERFACE",
		"ATSERVER", "WS", "COMMENT", "LINE_COMMENT", "STRING", "RAW_STRING",
		"LINE_VALUE", "ID", "LetterOrDigit", "ExponentPart", "EscapeSequence",
		"HexDigits", "HexDigit", "Digits", "Letter",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 25, 274, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 1,
		0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1,
		6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1,
		8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10,
		1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1,
		16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 4, 17, 140,
		8, 17, 11, 17, 12, 17, 141, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 5,
		18, 150, 8, 18, 10, 18, 12, 18, 153, 9, 18, 1, 18, 1, 18, 1, 18, 1, 18,
		1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 5, 19, 164, 8, 19, 10, 19, 12, 19, 167,
		9, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 5, 20, 174, 8, 20, 10, 20, 12,
		20, 177, 9, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 4, 21, 184, 8, 21, 11,
		21, 12, 21, 185, 1, 21, 1, 21, 1, 22, 1, 22, 5, 22, 192, 8, 22, 10, 22,
		12, 22, 195, 9, 22, 1, 22, 1, 22, 5, 22, 199, 8, 22, 10, 22, 12, 22, 202,
		9, 22, 3, 22, 204, 8, 22, 1, 23, 1, 23, 5, 23, 208, 8, 23, 10, 23, 12,
		23, 211, 9, 23, 1, 24, 1, 24, 3, 24, 215, 8, 24, 1, 25, 1, 25, 3, 25, 219,
		8, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 227, 8, 26, 1,
		26, 3, 26, 230, 8, 26, 1, 26, 1, 26, 1, 26, 4, 26, 235, 8, 26, 11, 26,
		12, 26, 236, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 244, 8, 26, 1, 27,
		1, 27, 1, 27, 5, 27, 249, 8, 27, 10, 27, 12, 27, 252, 9, 27, 1, 27, 3,
		27, 255, 8, 27, 1, 28, 1, 28, 1, 29, 1, 29, 5, 29, 261, 8, 29, 10, 29,
		12, 29, 264, 9, 29, 1, 29, 3, 29, 267, 8, 29, 1, 30, 1, 30, 1, 30, 1, 30,
		3, 30, 273, 8, 30, 1, 151, 0, 31, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6,
		13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31,
		16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49,
		25, 51, 0, 53, 0, 55, 0, 57, 0, 59, 0, 61, 0, 1, 0, 18, 3, 0, 9, 10, 12,
		13, 32, 32, 2, 0, 10, 10, 13, 13, 2, 0, 34, 34, 92, 92, 4, 0, 10, 10, 13,
		13, 92, 92, 96, 96, 2, 0, 9, 9, 32, 32, 4, 0, 10, 10, 13, 13, 34, 34, 96,
		96, 1, 0, 48, 57, 2, 0, 69, 69, 101, 101, 2, 0, 43, 43, 45, 45, 8, 0, 34,
		34, 39, 39, 92, 92, 98, 98, 102, 102, 110, 110, 114, 114, 116, 116, 1,
		0, 48, 51, 1, 0, 48, 55, 3, 0, 48, 57, 65, 70, 97, 102, 2, 0, 48, 57, 95,
		95, 4, 0, 36, 36, 65, 90, 95, 95, 97, 122, 2, 0, 0, 127, 55296, 56319,
		1, 0, 55296, 56319, 1, 0, 56320, 57343, 292, 0, 1, 1, 0, 0, 0, 0, 3, 1,
		0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1,
		0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19,
		1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0,
		27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0,
		0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0,
		0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0,
		0, 0, 1, 63, 1, 0, 0, 0, 3, 65, 1, 0, 0, 0, 5, 67, 1, 0, 0, 0, 7, 69, 1,
		0, 0, 0, 9, 71, 1, 0, 0, 0, 11, 73, 1, 0, 0, 0, 13, 75, 1, 0, 0, 0, 15,
		85, 1, 0, 0, 0, 17, 87, 1, 0, 0, 0, 19, 89, 1, 0, 0, 0, 21, 97, 1, 0, 0,
		0, 23, 99, 1, 0, 0, 0, 25, 101, 1, 0, 0, 0, 27, 104, 1, 0, 0, 0, 29, 109,
		1, 0, 0, 0, 31, 118, 1, 0, 0, 0, 33, 130, 1, 0, 0, 0, 35, 139, 1, 0, 0,
		0, 37, 145, 1, 0, 0, 0, 39, 159, 1, 0, 0, 0, 41, 170, 1, 0, 0, 0, 43, 180,
		1, 0, 0, 0, 45, 189, 1, 0, 0, 0, 47, 205, 1, 0, 0, 0, 49, 214, 1, 0, 0,
		0, 51, 216, 1, 0, 0, 0, 53, 243, 1, 0, 0, 0, 55, 245, 1, 0, 0, 0, 57, 256,
		1, 0, 0, 0, 59, 258, 1, 0, 0, 0, 61, 272, 1, 0, 0, 0, 63, 64, 5, 61, 0,
		0, 64, 2, 1, 0, 0, 0, 65, 66, 5, 40, 0, 0, 66, 4, 1, 0, 0, 0, 67, 68, 5,
		41, 0, 0, 68, 6, 1, 0, 0, 0, 69, 70, 5, 123, 0, 0, 70, 8, 1, 0, 0, 0, 71,
		72, 5, 125, 0, 0, 72, 10, 1, 0, 0, 0, 73, 74, 5, 42, 0, 0, 74, 12, 1, 0,
		0, 0, 75, 76, 5, 116, 0, 0, 76, 77, 5, 105, 0, 0, 77, 78, 5, 109, 0, 0,
		78, 79, 5, 101, 0, 0, 79, 80, 5, 46, 0, 0, 80, 81, 5, 84, 0, 0, 81, 82,
		5, 105, 0, 0, 82, 83, 5, 109, 0, 0, 83, 84, 5, 101, 0, 0, 84, 14, 1, 0,
		0, 0, 85, 86, 5, 91, 0, 0, 86, 16, 1, 0, 0, 0, 87, 88, 5, 93, 0, 0, 88,
		18, 1, 0, 0, 0, 89, 90, 5, 114, 0, 0, 90, 91, 5, 101, 0, 0, 91, 92, 5,
		116, 0, 0, 92, 93, 5, 117, 0, 0, 93, 94, 5, 114, 0, 0, 94, 95, 5, 110,
		0, 0, 95, 96, 5, 115, 0, 0, 96, 20, 1, 0, 0, 0, 97, 98, 5, 45, 0, 0, 98,
		22, 1, 0, 0, 0, 99, 100, 5, 47, 0, 0, 100, 24, 1, 0, 0, 0, 101, 102, 5,
		47, 0, 0, 102, 103, 5, 58, 0, 0, 103, 26, 1, 0, 0, 0, 104, 105, 5, 64,
		0, 0, 105, 106, 5, 100, 0, 0, 106, 107, 5, 111, 0, 0, 107, 108, 5, 99,
		0, 0, 108, 28, 1, 0, 0, 0, 109, 110, 5, 64, 0, 0, 110, 111, 5, 104, 0,
		0, 111, 112, 5, 97, 0, 0, 112, 113, 5, 110, 0, 0, 113, 114, 5, 100, 0,
		0, 114, 115, 5, 108, 0, 0, 115, 116, 5, 101, 0, 0, 116, 117, 5, 114, 0,
		0, 117, 30, 1, 0, 0, 0, 118, 119, 5, 105, 0, 0, 119, 120, 5, 110, 0, 0,
		120, 121, 5, 116, 0, 0, 121, 122, 5, 101, 0, 0, 122, 123, 5, 114, 0, 0,
		123, 124, 5, 102, 0, 0, 124, 125, 5, 97, 0, 0, 125, 126, 5, 99, 0, 0, 126,
		127, 5, 101, 0, 0, 127, 128, 5, 123, 0, 0, 128, 129, 5, 125, 0, 0, 129,
		32, 1, 0, 0, 0, 130, 131, 5, 64, 0, 0, 131, 132, 5, 115, 0, 0, 132, 133,
		5, 101, 0, 0, 133, 134, 5, 114, 0, 0, 134, 135, 5, 118, 0, 0, 135, 136,
		5, 101, 0, 0, 136, 137, 5, 114, 0, 0, 137, 34, 1, 0, 0, 0, 138, 140, 7,
		0, 0, 0, 139, 138, 1, 0, 0, 0, 140, 141, 1, 0, 0, 0, 141, 139, 1, 0, 0,
		0, 141, 142, 1, 0, 0, 0, 142, 143, 1, 0, 0, 0, 143, 144, 6, 17, 0, 0, 144,
		36, 1, 0, 0, 0, 145, 146, 5, 47, 0, 0, 146, 147, 5, 42, 0, 0, 147, 151,
		1, 0, 0, 0, 148, 150, 9, 0, 0, 0, 149, 148, 1, 0, 0, 0, 150, 153, 1, 0,
		0, 0, 151, 152, 1, 0, 0, 0, 151, 149, 1, 0, 0, 0, 152, 154, 1, 0, 0, 0,
		153, 151, 1, 0, 0, 0, 154, 155, 5, 42, 0, 0, 155, 156, 5, 47, 0, 0, 156,
		157, 1, 0, 0, 0, 157, 158, 6, 18, 1, 0, 158, 38, 1, 0, 0, 0, 159, 160,
		5, 47, 0, 0, 160, 161, 5, 47, 0, 0, 161, 165, 1, 0, 0, 0, 162, 164, 8,
		1, 0, 0, 163, 162, 1, 0, 0, 0, 164, 167, 1, 0, 0, 0, 165, 163, 1, 0, 0,
		0, 165, 166, 1, 0, 0, 0, 166, 168, 1, 0, 0, 0, 167, 165, 1, 0, 0, 0, 168,
		169, 6, 19, 1, 0, 169, 40, 1, 0, 0, 0, 170, 175, 5, 34, 0, 0, 171, 174,
		8, 2, 0, 0, 172, 174, 3, 53, 26, 0, 173, 171, 1, 0, 0, 0, 173, 172, 1,
		0, 0, 0, 174, 177, 1, 0, 0, 0, 175, 173, 1, 0, 0, 0, 175, 176, 1, 0, 0,
		0, 176, 178, 1, 0, 0, 0, 177, 175, 1, 0, 0, 0, 178, 179, 5, 34, 0, 0, 179,
		42, 1, 0, 0, 0, 180, 183, 5, 96, 0, 0, 181, 184, 8, 3, 0, 0, 182, 184,
		3, 53, 26, 0, 183, 181, 1, 0, 0, 0, 183, 182, 1, 0, 0, 0, 184, 185, 1,
		0, 0, 0, 185, 183, 1, 0, 0, 0, 185, 186, 1, 0, 0, 0, 186, 187, 1, 0, 0,
		0, 187, 188, 5, 96, 0, 0, 188, 44, 1, 0, 0, 0, 189, 193, 5, 58, 0, 0, 190,
		192, 7, 4, 0, 0, 191, 190, 1, 0, 0, 0, 192, 195, 1, 0, 0, 0, 193, 191,
		1, 0, 0, 0, 193, 194, 1, 0, 0, 0, 194, 203, 1, 0, 0, 0, 195, 193, 1, 0,
		0, 0, 196, 204, 3, 41, 20, 0, 197, 199, 8, 5, 0, 0, 198, 197, 1, 0, 0,
		0, 199, 202, 1, 0, 0, 0, 200, 198, 1, 0, 0, 0, 200, 201, 1, 0, 0, 0, 201,
		204, 1, 0, 0, 0, 202, 200, 1, 0, 0, 0, 203, 196, 1, 0, 0, 0, 203, 200,
		1, 0, 0, 0, 204, 46, 1, 0, 0, 0, 205, 209, 3, 61, 30, 0, 206, 208, 3, 49,
		24, 0, 207, 206, 1, 0, 0, 0, 208, 211, 1, 0, 0, 0, 209, 207, 1, 0, 0, 0,
		209, 210, 1, 0, 0, 0, 210, 48, 1, 0, 0, 0, 211, 209, 1, 0, 0, 0, 212, 215,
		3, 61, 30, 0, 213, 215, 7, 6, 0, 0, 214, 212, 1, 0, 0, 0, 214, 213, 1,
		0, 0, 0, 215, 50, 1, 0, 0, 0, 216, 218, 7, 7, 0, 0, 217, 219, 7, 8, 0,
		0, 218, 217, 1, 0, 0, 0, 218, 219, 1, 0, 0, 0, 219, 220, 1, 0, 0, 0, 220,
		221, 3, 59, 29, 0, 221, 52, 1, 0, 0, 0, 222, 223, 5, 92, 0, 0, 223, 244,
		7, 9, 0, 0, 224, 229, 5, 92, 0, 0, 225, 227, 7, 10, 0, 0, 226, 225, 1,
		0, 0, 0, 226, 227, 1, 0, 0, 0, 227, 228, 1, 0, 0, 0, 228, 230, 7, 11, 0,
		0, 229, 226, 1, 0, 0, 0, 229, 230, 1, 0, 0, 0, 230, 231, 1, 0, 0, 0, 231,
		244, 7, 11, 0, 0, 232, 234, 5, 92, 0, 0, 233, 235, 5, 117, 0, 0, 234, 233,
		1, 0, 0, 0, 235, 236, 1, 0, 0, 0, 236, 234, 1, 0, 0, 0, 236, 237, 1, 0,
		0, 0, 237, 238, 1, 0, 0, 0, 238, 239, 3, 57, 28, 0, 239, 240, 3, 57, 28,
		0, 240, 241, 3, 57, 28, 0, 241, 242, 3, 57, 28, 0, 242, 244, 1, 0, 0, 0,
		243, 222, 1, 0, 0, 0, 243, 224, 1, 0, 0, 0, 243, 232, 1, 0, 0, 0, 244,
		54, 1, 0, 0, 0, 245, 254, 3, 57, 28, 0, 246, 249, 3, 57, 28, 0, 247, 249,
		5, 95, 0, 0, 248, 246, 1, 0, 0, 0, 248, 247, 1, 0, 0, 0, 249, 252, 1, 0,
		0, 0, 250, 248, 1, 0, 0, 0, 250, 251, 1, 0, 0, 0, 251, 253, 1, 0, 0, 0,
		252, 250, 1, 0, 0, 0, 253, 255, 3, 57, 28, 0, 254, 250, 1, 0, 0, 0, 254,
		255, 1, 0, 0, 0, 255, 56, 1, 0, 0, 0, 256, 257, 7, 12, 0, 0, 257, 58, 1,
		0, 0, 0, 258, 266, 7, 6, 0, 0, 259, 261, 7, 13, 0, 0, 260, 259, 1, 0, 0,
		0, 261, 264, 1, 0, 0, 0, 262, 260, 1, 0, 0, 0, 262, 263, 1, 0, 0, 0, 263,
		265, 1, 0, 0, 0, 264, 262, 1, 0, 0, 0, 265, 267, 7, 6, 0, 0, 266, 262,
		1, 0, 0, 0, 266, 267, 1, 0, 0, 0, 267, 60, 1, 0, 0, 0, 268, 273, 7, 14,
		0, 0, 269, 273, 8, 15, 0, 0, 270, 271, 7, 16, 0, 0, 271, 273, 7, 17, 0,
		0, 272, 268, 1, 0, 0, 0, 272, 269, 1, 0, 0, 0, 272, 270, 1, 0, 0, 0, 273,
		62, 1, 0, 0, 0, 24, 0, 141, 151, 165, 173, 175, 183, 185, 193, 200, 203,
		209, 214, 218, 226, 229, 236, 243, 248, 250, 254, 262, 266, 272, 2, 0,
		1, 0, 0, 88, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ApiParserLexerInit initializes any static state used to implement ApiParserLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewApiParserLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func ApiParserLexerInit() {
	staticData := &apiparserlexerLexerStaticData
	staticData.once.Do(apiparserlexerLexerInit)
}

// NewApiParserLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewApiParserLexer(input antlr.CharStream) *ApiParserLexer {
	ApiParserLexerInit()
	l := new(ApiParserLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &apiparserlexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "ApiParser.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ApiParserLexer tokens.
const (
	ApiParserLexerT__0          = 1
	ApiParserLexerT__1          = 2
	ApiParserLexerT__2          = 3
	ApiParserLexerT__3          = 4
	ApiParserLexerT__4          = 5
	ApiParserLexerT__5          = 6
	ApiParserLexerT__6          = 7
	ApiParserLexerT__7          = 8
	ApiParserLexerT__8          = 9
	ApiParserLexerT__9          = 10
	ApiParserLexerT__10         = 11
	ApiParserLexerT__11         = 12
	ApiParserLexerT__12         = 13
	ApiParserLexerATDOC         = 14
	ApiParserLexerATHANDLER     = 15
	ApiParserLexerINTERFACE     = 16
	ApiParserLexerATSERVER      = 17
	ApiParserLexerWS            = 18
	ApiParserLexerCOMMENT       = 19
	ApiParserLexerLINE_COMMENT  = 20
	ApiParserLexerSTRING        = 21
	ApiParserLexerRAW_STRING    = 22
	ApiParserLexerLINE_VALUE    = 23
	ApiParserLexerID            = 24
	ApiParserLexerLetterOrDigit = 25
)

const COMEMNTS = 88
