// Code generated from ApiLexer.g4 by ANTLR 4.12.0. DO NOT EDIT.

package api

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type ApiLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var apilexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func apilexerLexerInit() {
	staticData := &apilexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "'@doc'", "'@handler'", "'interface{}'", "'@server'",
	}
	staticData.symbolicNames = []string{
		"", "ATDOC", "ATHANDLER", "INTERFACE", "ATSERVER", "WS", "COMMENT",
		"LINE_COMMENT", "STRING", "RAW_STRING", "LINE_VALUE", "ID", "LetterOrDigit",
	}
	staticData.ruleNames = []string{
		"ATDOC", "ATHANDLER", "INTERFACE", "ATSERVER", "WS", "COMMENT", "LINE_COMMENT",
		"STRING", "RAW_STRING", "LINE_VALUE", "ID", "LetterOrDigit", "ExponentPart",
		"EscapeSequence", "HexDigits", "HexDigit", "Digits", "Letter",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 12, 207, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
		1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3,
		1, 3, 1, 3, 1, 3, 1, 3, 1, 4, 4, 4, 73, 8, 4, 11, 4, 12, 4, 74, 1, 4, 1,
		4, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 83, 8, 5, 10, 5, 12, 5, 86, 9, 5, 1, 5,
		1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 5, 6, 97, 8, 6, 10, 6,
		12, 6, 100, 9, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 5, 7, 107, 8, 7, 10, 7,
		12, 7, 110, 9, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 4, 8, 117, 8, 8, 11, 8,
		12, 8, 118, 1, 8, 1, 8, 1, 9, 1, 9, 5, 9, 125, 8, 9, 10, 9, 12, 9, 128,
		9, 9, 1, 9, 1, 9, 5, 9, 132, 8, 9, 10, 9, 12, 9, 135, 9, 9, 3, 9, 137,
		8, 9, 1, 10, 1, 10, 5, 10, 141, 8, 10, 10, 10, 12, 10, 144, 9, 10, 1, 11,
		1, 11, 3, 11, 148, 8, 11, 1, 12, 1, 12, 3, 12, 152, 8, 12, 1, 12, 1, 12,
		1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 160, 8, 13, 1, 13, 3, 13, 163, 8, 13,
		1, 13, 1, 13, 1, 13, 4, 13, 168, 8, 13, 11, 13, 12, 13, 169, 1, 13, 1,
		13, 1, 13, 1, 13, 1, 13, 3, 13, 177, 8, 13, 1, 14, 1, 14, 1, 14, 5, 14,
		182, 8, 14, 10, 14, 12, 14, 185, 9, 14, 1, 14, 3, 14, 188, 8, 14, 1, 15,
		1, 15, 1, 16, 1, 16, 5, 16, 194, 8, 16, 10, 16, 12, 16, 197, 9, 16, 1,
		16, 3, 16, 200, 8, 16, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 206, 8, 17, 1,
		84, 0, 18, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19,
		10, 21, 11, 23, 12, 25, 0, 27, 0, 29, 0, 31, 0, 33, 0, 35, 0, 1, 0, 18,
		3, 0, 9, 10, 12, 13, 32, 32, 2, 0, 10, 10, 13, 13, 2, 0, 34, 34, 92, 92,
		4, 0, 10, 10, 13, 13, 92, 92, 96, 96, 2, 0, 9, 9, 32, 32, 4, 0, 10, 10,
		13, 13, 34, 34, 96, 96, 1, 0, 48, 57, 2, 0, 69, 69, 101, 101, 2, 0, 43,
		43, 45, 45, 8, 0, 34, 34, 39, 39, 92, 92, 98, 98, 102, 102, 110, 110, 114,
		114, 116, 116, 1, 0, 48, 51, 1, 0, 48, 55, 3, 0, 48, 57, 65, 70, 97, 102,
		2, 0, 48, 57, 95, 95, 4, 0, 36, 36, 65, 90, 95, 95, 97, 122, 2, 0, 0, 127,
		55296, 56319, 1, 0, 55296, 56319, 1, 0, 56320, 57343, 225, 0, 1, 1, 0,
		0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0,
		0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1,
		0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 1, 37,
		1, 0, 0, 0, 3, 42, 1, 0, 0, 0, 5, 51, 1, 0, 0, 0, 7, 63, 1, 0, 0, 0, 9,
		72, 1, 0, 0, 0, 11, 78, 1, 0, 0, 0, 13, 92, 1, 0, 0, 0, 15, 103, 1, 0,
		0, 0, 17, 113, 1, 0, 0, 0, 19, 122, 1, 0, 0, 0, 21, 138, 1, 0, 0, 0, 23,
		147, 1, 0, 0, 0, 25, 149, 1, 0, 0, 0, 27, 176, 1, 0, 0, 0, 29, 178, 1,
		0, 0, 0, 31, 189, 1, 0, 0, 0, 33, 191, 1, 0, 0, 0, 35, 205, 1, 0, 0, 0,
		37, 38, 5, 64, 0, 0, 38, 39, 5, 100, 0, 0, 39, 40, 5, 111, 0, 0, 40, 41,
		5, 99, 0, 0, 41, 2, 1, 0, 0, 0, 42, 43, 5, 64, 0, 0, 43, 44, 5, 104, 0,
		0, 44, 45, 5, 97, 0, 0, 45, 46, 5, 110, 0, 0, 46, 47, 5, 100, 0, 0, 47,
		48, 5, 108, 0, 0, 48, 49, 5, 101, 0, 0, 49, 50, 5, 114, 0, 0, 50, 4, 1,
		0, 0, 0, 51, 52, 5, 105, 0, 0, 52, 53, 5, 110, 0, 0, 53, 54, 5, 116, 0,
		0, 54, 55, 5, 101, 0, 0, 55, 56, 5, 114, 0, 0, 56, 57, 5, 102, 0, 0, 57,
		58, 5, 97, 0, 0, 58, 59, 5, 99, 0, 0, 59, 60, 5, 101, 0, 0, 60, 61, 5,
		123, 0, 0, 61, 62, 5, 125, 0, 0, 62, 6, 1, 0, 0, 0, 63, 64, 5, 64, 0, 0,
		64, 65, 5, 115, 0, 0, 65, 66, 5, 101, 0, 0, 66, 67, 5, 114, 0, 0, 67, 68,
		5, 118, 0, 0, 68, 69, 5, 101, 0, 0, 69, 70, 5, 114, 0, 0, 70, 8, 1, 0,
		0, 0, 71, 73, 7, 0, 0, 0, 72, 71, 1, 0, 0, 0, 73, 74, 1, 0, 0, 0, 74, 72,
		1, 0, 0, 0, 74, 75, 1, 0, 0, 0, 75, 76, 1, 0, 0, 0, 76, 77, 6, 4, 0, 0,
		77, 10, 1, 0, 0, 0, 78, 79, 5, 47, 0, 0, 79, 80, 5, 42, 0, 0, 80, 84, 1,
		0, 0, 0, 81, 83, 9, 0, 0, 0, 82, 81, 1, 0, 0, 0, 83, 86, 1, 0, 0, 0, 84,
		85, 1, 0, 0, 0, 84, 82, 1, 0, 0, 0, 85, 87, 1, 0, 0, 0, 86, 84, 1, 0, 0,
		0, 87, 88, 5, 42, 0, 0, 88, 89, 5, 47, 0, 0, 89, 90, 1, 0, 0, 0, 90, 91,
		6, 5, 1, 0, 91, 12, 1, 0, 0, 0, 92, 93, 5, 47, 0, 0, 93, 94, 5, 47, 0,
		0, 94, 98, 1, 0, 0, 0, 95, 97, 8, 1, 0, 0, 96, 95, 1, 0, 0, 0, 97, 100,
		1, 0, 0, 0, 98, 96, 1, 0, 0, 0, 98, 99, 1, 0, 0, 0, 99, 101, 1, 0, 0, 0,
		100, 98, 1, 0, 0, 0, 101, 102, 6, 6, 1, 0, 102, 14, 1, 0, 0, 0, 103, 108,
		5, 34, 0, 0, 104, 107, 8, 2, 0, 0, 105, 107, 3, 27, 13, 0, 106, 104, 1,
		0, 0, 0, 106, 105, 1, 0, 0, 0, 107, 110, 1, 0, 0, 0, 108, 106, 1, 0, 0,
		0, 108, 109, 1, 0, 0, 0, 109, 111, 1, 0, 0, 0, 110, 108, 1, 0, 0, 0, 111,
		112, 5, 34, 0, 0, 112, 16, 1, 0, 0, 0, 113, 116, 5, 96, 0, 0, 114, 117,
		8, 3, 0, 0, 115, 117, 3, 27, 13, 0, 116, 114, 1, 0, 0, 0, 116, 115, 1,
		0, 0, 0, 117, 118, 1, 0, 0, 0, 118, 116, 1, 0, 0, 0, 118, 119, 1, 0, 0,
		0, 119, 120, 1, 0, 0, 0, 120, 121, 5, 96, 0, 0, 121, 18, 1, 0, 0, 0, 122,
		126, 5, 58, 0, 0, 123, 125, 7, 4, 0, 0, 124, 123, 1, 0, 0, 0, 125, 128,
		1, 0, 0, 0, 126, 124, 1, 0, 0, 0, 126, 127, 1, 0, 0, 0, 127, 136, 1, 0,
		0, 0, 128, 126, 1, 0, 0, 0, 129, 137, 3, 15, 7, 0, 130, 132, 8, 5, 0, 0,
		131, 130, 1, 0, 0, 0, 132, 135, 1, 0, 0, 0, 133, 131, 1, 0, 0, 0, 133,
		134, 1, 0, 0, 0, 134, 137, 1, 0, 0, 0, 135, 133, 1, 0, 0, 0, 136, 129,
		1, 0, 0, 0, 136, 133, 1, 0, 0, 0, 137, 20, 1, 0, 0, 0, 138, 142, 3, 35,
		17, 0, 139, 141, 3, 23, 11, 0, 140, 139, 1, 0, 0, 0, 141, 144, 1, 0, 0,
		0, 142, 140, 1, 0, 0, 0, 142, 143, 1, 0, 0, 0, 143, 22, 1, 0, 0, 0, 144,
		142, 1, 0, 0, 0, 145, 148, 3, 35, 17, 0, 146, 148, 7, 6, 0, 0, 147, 145,
		1, 0, 0, 0, 147, 146, 1, 0, 0, 0, 148, 24, 1, 0, 0, 0, 149, 151, 7, 7,
		0, 0, 150, 152, 7, 8, 0, 0, 151, 150, 1, 0, 0, 0, 151, 152, 1, 0, 0, 0,
		152, 153, 1, 0, 0, 0, 153, 154, 3, 33, 16, 0, 154, 26, 1, 0, 0, 0, 155,
		156, 5, 92, 0, 0, 156, 177, 7, 9, 0, 0, 157, 162, 5, 92, 0, 0, 158, 160,
		7, 10, 0, 0, 159, 158, 1, 0, 0, 0, 159, 160, 1, 0, 0, 0, 160, 161, 1, 0,
		0, 0, 161, 163, 7, 11, 0, 0, 162, 159, 1, 0, 0, 0, 162, 163, 1, 0, 0, 0,
		163, 164, 1, 0, 0, 0, 164, 177, 7, 11, 0, 0, 165, 167, 5, 92, 0, 0, 166,
		168, 5, 117, 0, 0, 167, 166, 1, 0, 0, 0, 168, 169, 1, 0, 0, 0, 169, 167,
		1, 0, 0, 0, 169, 170, 1, 0, 0, 0, 170, 171, 1, 0, 0, 0, 171, 172, 3, 31,
		15, 0, 172, 173, 3, 31, 15, 0, 173, 174, 3, 31, 15, 0, 174, 175, 3, 31,
		15, 0, 175, 177, 1, 0, 0, 0, 176, 155, 1, 0, 0, 0, 176, 157, 1, 0, 0, 0,
		176, 165, 1, 0, 0, 0, 177, 28, 1, 0, 0, 0, 178, 187, 3, 31, 15, 0, 179,
		182, 3, 31, 15, 0, 180, 182, 5, 95, 0, 0, 181, 179, 1, 0, 0, 0, 181, 180,
		1, 0, 0, 0, 182, 185, 1, 0, 0, 0, 183, 181, 1, 0, 0, 0, 183, 184, 1, 0,
		0, 0, 184, 186, 1, 0, 0, 0, 185, 183, 1, 0, 0, 0, 186, 188, 3, 31, 15,
		0, 187, 183, 1, 0, 0, 0, 187, 188, 1, 0, 0, 0, 188, 30, 1, 0, 0, 0, 189,
		190, 7, 12, 0, 0, 190, 32, 1, 0, 0, 0, 191, 199, 7, 6, 0, 0, 192, 194,
		7, 13, 0, 0, 193, 192, 1, 0, 0, 0, 194, 197, 1, 0, 0, 0, 195, 193, 1, 0,
		0, 0, 195, 196, 1, 0, 0, 0, 196, 198, 1, 0, 0, 0, 197, 195, 1, 0, 0, 0,
		198, 200, 7, 6, 0, 0, 199, 195, 1, 0, 0, 0, 199, 200, 1, 0, 0, 0, 200,
		34, 1, 0, 0, 0, 201, 206, 7, 14, 0, 0, 202, 206, 8, 15, 0, 0, 203, 204,
		7, 16, 0, 0, 204, 206, 7, 17, 0, 0, 205, 201, 1, 0, 0, 0, 205, 202, 1,
		0, 0, 0, 205, 203, 1, 0, 0, 0, 206, 36, 1, 0, 0, 0, 24, 0, 74, 84, 98,
		106, 108, 116, 118, 126, 133, 136, 142, 147, 151, 159, 162, 169, 176, 181,
		183, 187, 195, 199, 205, 2, 0, 1, 0, 0, 88, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ApiLexerInit initializes any static state used to implement ApiLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewApiLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func ApiLexerInit() {
	staticData := &apilexerLexerStaticData
	staticData.once.Do(apilexerLexerInit)
}

// NewApiLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewApiLexer(input antlr.CharStream) *ApiLexer {
	ApiLexerInit()
	l := new(ApiLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &apilexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "ApiLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ApiLexer tokens.
const (
	ApiLexerATDOC         = 1
	ApiLexerATHANDLER     = 2
	ApiLexerINTERFACE     = 3
	ApiLexerATSERVER      = 4
	ApiLexerWS            = 5
	ApiLexerCOMMENT       = 6
	ApiLexerLINE_COMMENT  = 7
	ApiLexerSTRING        = 8
	ApiLexerRAW_STRING    = 9
	ApiLexerLINE_VALUE    = 10
	ApiLexerID            = 11
	ApiLexerLetterOrDigit = 12
)
